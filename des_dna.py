# -*- coding: utf-8 -*-
"""DES-DNA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PNU0_oDViawglo1SMhjIXQOSTuqWlWn5
"""

#TRIPLE-DES-CODE
#get the input message
# Function to convert input string to ASCII values and pad if necessary
def convert_to_ascii(input_string):
    ascii_values = ""
    for char in input_string:
        ascii_val = str(ord(char))
        ascii_values += ascii_val
    if len(ascii_values) < 32:
        ascii_values = ascii_values.ljust(32, '0')  # Appending zeros at the end if length is less than 32
    return ascii_values

# Function to read message from a file
def read_message_from_file(file_path):
    with open(file_path, 'r') as file:
        message = file.read().strip()  # Read the message and remove leading/trailing whitespace
    return message

# Read the input message from the file
file_path = "input_message.txt"  # Specify your file path here
input_string_original = read_message_from_file(file_path)

# Convert the message to ASCII values
hex_input_message = convert_to_ascii(input_string_original)
print("ASCII values:", hex_input_message)


#get three input keys
hex_input_key_1=input("enter the key 1:");
hex_input_key_2=input("enter the key 2:");
hex_input_key_3=input("enter the key 3:");

#Encryption function
def Encryption(hex_input_message,hex_input_key):
    # Function to convert a given hexadecimal message and key to binary
    def hex_to_binary(hex_str):
        hex_to_bin_mapping = {
        '0': '0000',
        '1': '0001',
        '2': '0010',
        '3': '0011',
        '4': '0100',
        '5': '0101',
        '6': '0110',
        '7': '0111',
        '8': '1000',
        '9': '1001',
        'A': '1010',
        'B': '1011',
        'C': '1100',
        'D': '1101',
        'E': '1110',
        'F': '1111'
          }
        binary_str = ""
        for value in hex_str:
            binary_str += hex_to_bin_mapping[value]
        return binary_str
    # Function to convert the converted binary message or key to DNA sequence
    def binary_to_dna(binary_str):
        binary_dna_mapping= {
                '00': 'A',
                '01': 'C',
                '10': 'G',
                '11': 'T'
        }
        dna_seq = ''
        for i in range(0, len(binary_str), 2):
            dna_seq += binary_dna_mapping[binary_str[i:i+2]]
        return dna_seq
    #to get the inputfor the key
    binary_output_key = hex_to_binary(hex_input_key)
    dna_sequence_key = binary_to_dna(binary_output_key)
    print("DNA Sequence for key:", dna_sequence_key)

    binary_output_message = hex_to_binary(hex_input_message)
    dna_sequence_message = binary_to_dna(binary_output_message)
    print("DNA Sequence for message:", dna_sequence_message)
    def permute(key, permutation):
        return ''.join(key[i - 1] for i in permutation)
    def generate_round_keys(dna_sequence_key):

    #permutation 1 table for round key generation
        PC1 = [57, 49, 41, 33, 25, 17, 9,
               1, 58, 50, 42, 34, 26, 18,
               10, 2, 59, 51, 43, 35, 27,
               19, 11, 3, 60, 52, 44, 36,
               63, 55, 47, 39, 31, 23, 15,
               7, 62, 54, 46, 38, 30, 22,
               14, 6, 61, 53, 45, 37, 29,
               21, 13, 5, 28, 20, 12, 4]
        #permutation 2 table for round key generation
        PC2 = [14, 17, 11, 24, 1, 5,
               3, 28, 15, 6, 21, 10,
               23, 19, 12, 4, 26, 8,
               16, 7, 27, 20, 13, 2,
               41, 52, 31, 37, 47, 55,
               30, 40, 51, 45, 33, 48,
               44, 49, 39, 56, 34, 53,
               46, 42, 50, 36, 29, 32]
        #shifting based on the rounds
        rotations = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

        round_keys = []

        key = permute(dna_sequence_key, PC1)
        #dividing the 56 bits into two 28 bits
        C = key[:28]
        D = key[28:]

        for i in range(16):
            C = C[rotations[i]:] + C[:rotations[i]]
            D = D[rotations[i]:] + D[:rotations[i]]
            CD = C + D
            round_key = permute(CD, PC2)
            round_keys.append(round_key)


        return round_keys
    #round key generation
    round_keys = generate_round_keys(dna_sequence_key)
    print("THE KEYS AFTER ROUND KEY GENERATION ARE")
    for i, key in enumerate(round_keys):
        print(f"K{i+1} =", key)
    #initial permutation
    def initial_permutation(dna_sequence_message):
        initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
                    60, 52, 44, 36, 28, 20, 12, 4,
                    62, 54, 46, 38, 30, 22, 14, 6,
                    64, 56, 48, 40, 32, 24, 16, 8,
                    57, 49, 41, 33, 25, 17, 9, 1,
                    59, 51, 43, 35, 27, 19, 11, 3,
                    61, 53, 45, 37, 29, 21, 13, 5,
                    63, 55, 47, 39, 31, 23, 15, 7]
        initial_permutation_messages=[];
        initial_permutation_message = permute(dna_sequence_message, initial_perm)
        initial_permutation_messages.append(initial_permutation_message)
        return(initial_permutation_message)
    initial_permutation_output=initial_permutation(dna_sequence_message)
    print("After initial_permutation_output:");
    print(initial_permutation_output)
    #dividing the initial permutation output
    length=len(initial_permutation_output)//2
    L0=initial_permutation_output[:length]
    R0=initial_permutation_output[length:]
    print("L0=",L0)
    print("R0=",R0)
    #performing the expansion d permutation on the right side part

    def expansion_function(R0):
        exp_d = [32, 1, 2, 3, 4, 5, 4, 5,
             6, 7, 8, 9, 8, 9, 10, 11,
             12, 13, 12, 13, 14, 15, 16, 17,
             16, 17, 18, 19, 20, 21, 20, 21,
             22, 23, 24, 25, 24, 25, 26, 27,
             28, 29, 28, 29, 30, 31, 32, 1]
        expansion_permutation_messages=[];
        expansion_permutation_message = permute(R0,exp_d)
        expansion_permutation_messages.append(expansion_permutation_message)
        return(expansion_permutation_message)
    expansion_permutation_output=expansion_function(R0)
    print("After expansion_permutation_output:");
    print(expansion_permutation_output)
 #performing dna xor function
    def dna_xor(nucleotide1, nucleotide2):

        xor_table = {
            ('A', 'A'): 'A',
            ('A', 'C'): 'C',
            ('A', 'G'): 'G',
            ('A', 'T'): 'T',
            ('C', 'A'): 'C',
            ('C', 'C'): 'A',
            ('C', 'G'): 'T',
            ('C', 'T'): 'G',
            ('G', 'A'): 'G',
            ('G', 'C'): 'T',
            ('G', 'G'): 'A',
            ('G', 'T'): 'C',
            ('T', 'A'): 'T',
            ('T', 'C'): 'G',
            ('T', 'G'): 'C',
            ('T', 'T'): 'A'
        }

        return xor_table[(nucleotide1, nucleotide2)]
       # Assuming expansion_permutation_output and round_keys[0] are sequences of nucleotides
    xor_result = ''.join(dna_xor(n1, n2) for n1, n2 in zip(expansion_permutation_output, round_keys[0]))
    print("XOR result:", xor_result)

# DNA S-Box tables
    s_box_s1= {
        'A': {'AA':'TG', 'AC':'AA', 'AG': 'CA', 'AT': 'TT', 'CA': 'TC', 'CC': 'CT', 'CG': 'AC', 'CT': 'CA',
              'GA': 'AG', 'GC': 'TG', 'GG': 'TT', 'GT': 'AG', 'TA': 'GT', 'TC': 'TC', 'TG': 'GA', 'TT': 'AC'},
        'C': {'AA': 'AT', 'AC': 'GG', 'AG': 'GG', 'AT': 'CG', 'CA': 'CG', 'CC': 'TA', 'CG': 'TA', 'CT': 'GT',
              'GA': 'CC', 'GC': 'GC', 'GG': 'GC', 'GT': 'CC', 'TA': 'AA', 'TC': 'AT', 'TG': 'CT', 'TT': 'GA'},
        'G': {'AA': 'CA', 'AC': 'TT', 'AG': 'AC', 'AT': 'TA', 'CA': 'TG', 'CC': 'GA', 'CG': 'GA', 'CT': 'AG',
              'GA': 'TC', 'GC': 'CA', 'GG': 'CG', 'GT': 'GC', 'TA': 'AG', 'TC': 'AC', 'TG': 'GT', 'TT': 'CT'},
        'T': {'AA': 'TT', 'AC': 'CC', 'AG': 'TA', 'AT': 'GT', 'CA': 'GC', 'CC': 'AT', 'CG': 'CT', 'CT': 'TG',
              'GA': 'AT', 'GC': 'GG', 'GG': 'GG', 'GT': 'AA', 'TA': 'CC', 'TC': 'CG', 'TG': 'AA', 'TT':'TC'}}
    s_box_s2= {
        'A': {'AA': 'TT', 'AC': 'AT', 'AG': 'AC', 'AT': 'TC', 'CA': 'GA', 'CC': 'CA', 'CG': 'TG', 'CT': 'CT',
              'GA': 'CG', 'GC': 'TT', 'GG': 'GT', 'GT': 'AG', 'TA': 'AT', 'TC': 'GA', 'TG': 'CA', 'TT': 'TG'},
            'C': {'AA': 'GC', 'AC': 'TA', 'AG': 'CT', 'AT': 'AA', 'CA': 'AG', 'CC': 'AC', 'CG': 'TC', 'CT': 'GG',
              'GA': 'TA', 'GC': 'CG', 'GG': 'AA', 'GT': 'GC', 'TA': 'CC', 'TC': 'GT','TG': 'GG', 'TT': 'CC'},
        'G': {'AA': 'AA', 'AC': 'TC', 'AG': 'TG', 'AT': 'GA', 'CA': 'CT', 'CC': 'GG', 'CG': 'GT', 'CT': 'AC',
              'GA': 'GG', 'GC': 'AT', 'GG': 'CA', 'GT': 'TT', 'TA': 'TC', 'TC': 'CA', 'TG': 'AC', 'TT': 'AG'},
        'T': {'AA': 'CC', 'AC': 'GT', 'AG': 'GA', 'AT': 'CG', 'CA': 'TA', 'CC': 'CT', 'CG': 'CG', 'CT': 'TA',
              'GA': 'GC', 'GC': 'AA', 'GG': 'AT', 'GT': 'CC', 'TA': 'AG', 'TC': 'TG', 'TG': 'TT', 'TT':'GC'}}

    s_box_s3= {
        'A': {'AA': 'GG', 'AC': 'TC', 'AG': 'AA', 'AT': 'CT', 'CA': 'GC', 'CC': 'AA', 'CG': 'TG', 'CT': 'GC',
              'GA': 'CG', 'GC': 'AT', 'GG': 'AT', 'GT': 'CA', 'TA': 'TT', 'TC': 'CG', 'TG': 'CC', 'TT': 'GG'},
        'C': {'AA': 'AC', 'AC': 'AG', 'AG': 'TC', 'AT': 'GA', 'CA': 'TA', 'CC': 'CC', 'CG': 'CT', 'CT': 'TG',
              'GA': 'GT', 'GC': 'TA', 'GG': 'CA', 'GT': 'GT', 'TA': 'AG', 'TC': 'TT', 'TG': 'GA', 'TT': 'AC'},
        'G': {'AA': 'TC', 'AC': 'AC', 'AG': 'CG', 'AT': 'GG', 'CA': 'CA', 'CC': 'TC', 'CG': 'GC', 'CT': 'AA',
              'GA': 'GA', 'GC': 'CG', 'GG': 'TT', 'GT': 'GC', 'TA': 'AT', 'TC': 'GA', 'TG': 'AA', 'TT': 'CT'},
        'T': {'AA': 'GT', 'AC': 'CA', 'AG': 'AC', 'AT': 'TT', 'CA': 'AG', 'CC': 'TG', 'CG': 'TA', 'CT': 'AT',
              'GA': 'CC', 'GC': 'GT', 'GG': 'GG', 'GT': 'CC', 'TA': 'TG', 'TC': 'AG', 'TG': 'CT', 'TT':'TA'}}
    s_box_s4 = {
        'A': {'AA': 'CT', 'AC': 'TC', 'AG': 'TC', 'AT': 'GA', 'CA': 'TG', 'CC': 'GT', 'CG': 'AT', 'CT': 'CC',
              'GA': 'AA', 'GC': 'CG', 'GG': 'CG', 'GT': 'TT', 'TA': 'GC', 'TC': 'AA', 'TG': 'GG', 'TT': 'AT'},
        'C': {'AA': 'AC', 'AC': 'CA', 'AG': 'AG', 'AT': 'CT', 'CA': 'GA', 'CC': 'AG', 'CG': 'CC', 'CT': 'TA',
              'GA': 'GT', 'GC': 'AC', 'GG': 'TA', 'GT': 'GG', 'TA': 'CA', 'TC': 'TG', 'TG': 'TT', 'TT': 'GC'},
        'G': {'AA': 'GG', 'AC': 'AT', 'AG': 'CG', 'AT': 'TT', 'CA': 'GC', 'CC': 'AA', 'CG': 'AA', 'CT': 'CG',
              'GA': 'TA', 'GC': 'GG', 'GG': 'GT', 'GT': 'AC', 'TA': 'CT', 'TC': 'TC', 'TG': 'TC', 'TT': 'GA'},
        'T': {'AA': 'TT', 'AC': 'GC', 'AG': 'AC', 'AT': 'CA', 'CA': 'AT', 'CC': 'CC', 'CG': 'TG', 'CT': 'GT',
              'GA': 'CC', 'GC': 'TA', 'GG': 'AG', 'GT': 'CT', 'TA': 'GA', 'TC': 'AG', 'TG': 'CA', 'TT':'TG'}}
    s_box_s5= {
        'A': {'AA': 'AG', 'AC': 'TG', 'AG': 'TA', 'AT': 'GT', 'CA': 'CA', 'CC': 'AG', 'CG': 'AC', 'CT': 'TA',
              'GA': 'CT', 'GC': 'CA', 'GG': 'GG', 'GT': 'CT', 'TA': 'GT', 'TC': 'TC', 'TG': 'CG', 'TT': 'AC'},
        'C': {'AA': 'GA', 'AC': 'CC', 'AG': 'CC', 'AT': 'AA', 'CA': 'AT', 'CC': 'TT', 'CG': 'TT', 'CT': 'GG',
              'GA': 'TC', 'GC': 'AT', 'GG': 'AA', 'GT': 'GC', 'TA': 'TG', 'TC': 'GA', 'TG': 'GC', 'TT': 'CG'},
        'G': {'AA': 'CA', 'AC': 'GT', 'AG': 'AG', 'AT': 'GA', 'CA': 'AC', 'CC': 'TA', 'CG': 'GT', 'CT': 'CT',
              'GA': 'GG', 'GC': 'AC', 'GG': 'TC', 'GT': 'TG', 'TA': 'CT', 'TC': 'AG', 'TG': 'GA', 'TT': 'TC'},
        'T': {'AA': 'TT', 'AC': 'CG', 'AG': 'GC', 'AT': 'TT', 'CA': 'TA', 'CC': 'AA', 'CG': 'CC', 'CT': 'GC',
              'GA': 'CG', 'GC': 'GG', 'GG': 'AT', 'GT': 'CA', 'TA': 'AA', 'TC': 'CC', 'TG': 'TG', 'TT':'AT'}}
    s_box_s6= {
        'A': {'AA': 'TA', 'AC': 'GG', 'AG': 'AC', 'AT': 'TT', 'CA': 'GG', 'CC': 'CA', 'CG': 'TT', 'CT': 'AG',
              'GA': 'GC', 'GC': 'CT', 'GG': 'AG', 'GT': 'TA', 'TA': 'CG', 'TC': 'GC', 'TG': 'GA', 'TT': 'CC'},
        'C': {'AA': 'AA', 'AC': 'CG', 'AG': 'TC', 'AT': 'AC', 'CA': 'AT', 'CC': 'TC', 'CG': 'CA', 'CT': 'TG',
              'GA': 'TG', 'GC': 'AA', 'GG': 'CT', 'GT': 'GT', 'TA': 'CC', 'TC': 'AT', 'TG': 'GT', 'TT': 'GA'},
        'G': {'AA': 'GC', 'AC': 'CA', 'AG': 'TG', 'AT': 'AT', 'CA': 'TT', 'CC': 'AG', 'CG': 'CC', 'CT': 'TA',
              'GA': 'AG', 'GC': 'GC', 'GG': 'GA', 'GT': 'CC', 'TA': 'TA', 'TC': 'TT', 'TG': 'AT', 'TT': 'GG'},
        'T': {'AA': 'CT', 'AC': 'GT', 'AG': 'AA', 'AT': 'TG', 'CA': 'CA', 'CC': 'AC', 'CG': 'GG', 'CT': 'CT',
              'GA': 'AC', 'GC': 'CG', 'GG': 'TC', 'GT': 'AA', 'TA': 'GT', 'TC': 'GA', 'TG': 'CG', 'TT':'TC'}}
    s_box_s7 = {
        'A': {'AA': 'CA', 'AC': 'TC', 'AG': 'GT', 'AT': 'AA', 'CA': 'AG', 'CC': 'GT', 'CG': 'TG', 'CT': 'CT',
              'GA': 'TT', 'GC': 'CA', 'GG': 'AA', 'GT': 'GC', 'TA': 'GA', 'TC': 'AC', 'TG': 'TC', 'TT': 'GG'},
        'C': {'AA': 'AT', 'AC': 'TG', 'AG': 'TA', 'AT': 'AT', 'CA': 'GC', 'CC': 'CC', 'CG': 'CT', 'CT': 'TA',
              'GA': 'CC', 'GC': 'AG', 'GG': 'GG', 'GT': 'TT', 'TA': 'CG', 'TC': 'GA', 'TG': 'AC', 'TT': 'CG'},
        'G': {'AA': 'AC', 'AC': 'CG', 'AG': 'CA', 'AT': 'GT', 'CA': 'GT', 'CC': 'TC', 'CG': 'TC', 'CT': 'GA',
              'GA': 'TA', 'GC': 'AC', 'GG': 'AT', 'GT': 'CA', 'TA': 'CT', 'TC': 'GG', 'TG': 'TG', 'TT': 'CT'},
        'T': {'AA': 'GG', 'AC': 'GC', 'AG': 'TT', 'AT': 'CC', 'CA': 'CG', 'CC': 'AA', 'CG': 'GA', 'CT': 'TT',
              'GA': 'AA', 'GC': 'TG', 'GG': 'CC', 'GT': 'AG', 'TA': 'GC', 'TC': 'AT', 'TG': 'AG', 'TT':'TA'}}

    s_box_s8 = {
        'A': {'AA': 'TC', 'AC': 'AC', 'AG': 'AG', 'AT': 'TT', 'CA': 'GA', 'CC': 'TC', 'CG': 'CA', 'CT': 'GA',
              'GA': 'CG', 'GC': 'GG', 'GG': 'TT', 'GT': 'AT', 'TA': 'GT', 'TC': 'CT', 'TG': 'AC', 'TT': 'CA'},
        'C': {'AA': 'GG', 'AC': 'TA', 'AG': 'GC', 'AT': 'CC', 'CA': 'AT', 'CC': 'CG', 'CG': 'TG', 'CT': 'GT',
              'GA': 'CC', 'GC': 'AA', 'GG': 'AA', 'GT': 'TG', 'TA': 'TA', 'TC': 'GC', 'TG': 'CT', 'TT': 'AG'},
        'G': {'AA': 'CT', 'AC': 'AG', 'AG': 'GT', 'AT': 'AC', 'CA': 'CA', 'CC': 'TG', 'CG': 'AC', 'CT': 'CT',
              'GA': 'GC', 'GC': 'CA', 'GG': 'TA', 'GT': 'GG', 'TA': 'TG', 'TC': 'GA', 'TG': 'AG', 'TT': 'TC'},
        'T': {'AA': 'AA', 'AC': 'TT', 'AG': 'CG', 'AT': 'TA', 'CA': 'GG', 'CC': 'GC', 'CG': 'TC', 'CT': 'AA',
              'GA': 'TT', 'GC': 'AT', 'GG': 'AT', 'GT': 'CC', 'TA': 'CC', 'TC': 'CG', 'TG': 'GA', 'TT':'GT'}}
    def divide_input(input_str):
        nucleotides = [input_str[i:i+3] for i in range(0, len(input_str), 3)]
        return nucleotides
    nucleotides = divide_input(xor_result)
    print("Divided nucleotides:", nucleotides)

    def get_sbox_output(s_box, input_str):
        output = ""
        for i in range(0, len(input_str), 3):
            block = input_str[i:i+3]
            row = block[0]
            col = block[1:]
            output += s_box[row][col]
        return output
    def apply_sbox_to_nucleotides(nucleotides, s_boxes):
        output = ""
        for i, nucleotide in enumerate(nucleotides, start=1):
            s_box_index = (i - 1) % len(s_boxes)  # Calculate the index of the corresponding s-box
            s_box = s_boxes[s_box_index]
            output += get_sbox_output(s_box, nucleotide)
        return output
    s_boxes = [s_box_s1, s_box_s2, s_box_s3, s_box_s4, s_box_s5, s_box_s6, s_box_s7, s_box_s8]  # List of S-boxes
    output = apply_sbox_to_nucleotides(nucleotides, s_boxes)
    print("Result after applying S-boxes:", output)

    def apply_pbox(input_str, pbox_indices):
        output_p = ''
        for index in pbox_indices:
            output_p += input_str[index - 1]  # Subtract 1 to convert from 1-based to 0-based index
        return output_p
    pbox_indices = [
    16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25
    ]
    permutated_output = apply_pbox(output, pbox_indices)

    print("Permutated Output:", permutated_output)
    def xor_with_L0(permutated_output, L0):
        result = ''
        for i in range(len(permutated_output)):
            result += dna_xor(permutated_output[i], L0[i])
        return result
    R1=xor_with_L0(permutated_output,L0)
    L1=R0
    print("R1:",xor_with_L0(permutated_output,L0))
    print("L1:",R0)
    #function for printing key from k2 to k16
    def round_function(L_prev, R_prev, round_key):
        expanded_R = expansion_function(R_prev)
        xor_result = ''.join(dna_xor(n1, n2) for n1, n2 in zip(expanded_R, round_key))
        nucleotides = divide_input(xor_result)
        s_box_output = apply_sbox_to_nucleotides(nucleotides, [s_box_s1,s_box_s2,s_box_s3,s_box_s4,
                                                               s_box_s5, s_box_s6, s_box_s7, s_box_s8])
        permuted_output = apply_pbox(s_box_output, pbox_indices)
        R_new = xor_with_L0(permuted_output, L_prev)
        L_new = R_prev

        return L_new, R_new


# Start from round 2 and go up to round 16
    for i in range(2, 17):
        round_key = round_keys[i-1]  # Round keys are zero-indexed in the list
        L1, R1 = round_function(L1, R1, round_key)
        print(f"Round {i}:")
        print("L{} =".format(i), L1)
        print("R{} =".format(i), R1)

    #function for final permutation
    final_output = R1 + L1
    print("Final Output:", final_output)
    def final_permutation(final_output):
        final_perm = [40, 8, 48, 16, 56, 24, 64, 32,
                  39, 7, 47, 15, 55, 23, 63, 31,
                  38, 6, 46, 14, 54, 22, 62, 30,
                  37, 5, 45, 13, 53, 21, 61, 29,
                  36, 4, 44, 12, 52, 20, 60, 28,
                  35, 3, 43, 11, 51, 19, 59, 27,
                  34, 2, 42, 10, 50, 18, 58, 26,
                  33, 1, 41, 9, 49, 17, 57, 25]
        final_permutation_messages=[];
        final_permutation_message = permute(final_output,final_perm)
        final_permutation_messages.append(final_permutation_message)
        return(final_permutation_message)
    final_permutation_output=final_permutation(final_output)
    return final_permutation_output



def Decryption(final_output,hex_input_key):
    # Function to convert a given hexadecimal message and key to binary
    def hex_to_binary(hex_str):
        hex_to_bin_mapping = {
        '0': '0000',
        '1': '0001',
        '2': '0010',
        '3': '0011',
        '4': '0100',
        '5': '0101',
        '6': '0110',
        '7': '0111',
        '8': '1000',
        '9': '1001',
        'A': '1010',
        'B': '1011',
        'C': '1100',
        'D': '1101',
        'E': '1110',
        'F': '1111'
          }
        binary_str = ""
        for value in hex_str:
            binary_str += hex_to_bin_mapping[value]
        return binary_str
    # Function to convert the converted binary message or key to DNA sequence
    def binary_to_dna(binary_str):
        binary_dna_mapping= {
                '00': 'A',
                '01': 'C',
                '10': 'G',
                '11': 'T'
        }
        dna_seq = ''
        for i in range(0, len(binary_str), 2):
            dna_seq += binary_dna_mapping[binary_str[i:i+2]]
        return dna_seq

    binary_output_key = hex_to_binary(hex_input_key)
    dna_sequence_key = binary_to_dna(binary_output_key)
    def permute(key, permutation):
        return ''.join(key[i - 1] for i in permutation)
    def generate_round_keys(dna_sequence_key):

    #permutation 1 table for round key generation
        PC1 = [57, 49, 41, 33, 25, 17, 9,
               1, 58, 50, 42, 34, 26, 18,
               10, 2, 59, 51, 43, 35, 27,
               19, 11, 3, 60, 52, 44, 36,
               63, 55, 47, 39, 31, 23, 15,
               7, 62, 54, 46, 38, 30, 22,
               14, 6, 61, 53, 45, 37, 29,
               21, 13, 5, 28, 20, 12, 4]
        #permutation 2 table for round key generation
        PC2 = [14, 17, 11, 24, 1, 5,
               3, 28, 15, 6, 21, 10,
               23, 19, 12, 4, 26, 8,
               16, 7, 27, 20, 13, 2,
               41, 52, 31, 37, 47, 55,
               30, 40, 51, 45, 33, 48,
               44, 49, 39, 56, 34, 53,
               46, 42, 50, 36, 29, 32]
        #shifting based on the rounds
        rotations = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

        round_keys = []

        key = permute(dna_sequence_key, PC1)
        #dividing the 56 bits into two 28 bits
        C = key[:28]
        D = key[28:]

        for i in range(16):
            C = C[rotations[i]:] + C[:rotations[i]]
            D = D[rotations[i]:] + D[:rotations[i]]
            CD = C + D
            round_key = permute(CD, PC2)
            round_keys.append(round_key)

        return round_keys
    round_keys = generate_round_keys(dna_sequence_key)
    round_keys=round_keys[::-1]
    print("THE KEYS AFTER ROUND KEY GENERATION ARE")
    for i, key in enumerate(round_keys):
        print(f"K{i+1} =", key)
    def initial_permutation(final_output):
        initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
                    60, 52, 44, 36, 28, 20, 12, 4,
                    62, 54, 46, 38, 30, 22, 14, 6,
                    64, 56, 48, 40, 32, 24, 16, 8,
                    57, 49, 41, 33, 25, 17, 9, 1,
                    59, 51, 43, 35, 27, 19, 11, 3,
                    61, 53, 45, 37, 29, 21, 13, 5,
                    63, 55, 47, 39, 31, 23, 15, 7]
        initial_permutation_messages=[];
        initial_permutation_message = permute(final_output, initial_perm)
        initial_permutation_messages.append(initial_permutation_message)
        return(initial_permutation_message)
    initial_permutation_output=initial_permutation(final_output)
    print("After initial_permutation_output:");
    print(initial_permutation_output)
    #dividing the initial permutation output
    length=len(initial_permutation_output)//2
    L0=initial_permutation_output[:length]
    R0=initial_permutation_output[length:]
    print("L0=",L0)
    print("R0=",R0)
    #performing the expansion d permutation on the right side part
    def expansion_function(R0):
        exp_d = [32, 1, 2, 3, 4, 5, 4, 5,
             6, 7, 8, 9, 8, 9, 10, 11,
             12, 13, 12, 13, 14, 15, 16, 17,
             16, 17, 18, 19, 20, 21, 20, 21,
             22, 23, 24, 25, 24, 25, 26, 27,
             28, 29, 28, 29, 30, 31, 32, 1]
        expansion_permutation_messages=[];
        expansion_permutation_message = permute(R0,exp_d)
        expansion_permutation_messages.append(expansion_permutation_message)
        return(expansion_permutation_message)
    expansion_permutation_output=expansion_function(R0)
    print("After expansion_permutation_output:");
    print(expansion_permutation_output)

    def dna_xor(nucleotide1, nucleotide2):

        xor_table = {
            ('A', 'A'): 'A',
            ('A', 'C'): 'C',
            ('A', 'G'): 'G',
            ('A', 'T'): 'T',
            ('C', 'A'): 'C',
            ('C', 'C'): 'A',
            ('C', 'G'): 'T',
            ('C', 'T'): 'G',
            ('G', 'A'): 'G',
            ('G', 'C'): 'T',
            ('G', 'G'): 'A',
            ('G', 'T'): 'C',
            ('T', 'A'): 'T',
            ('T', 'C'): 'G',
            ('T', 'G'): 'C',
            ('T', 'T'): 'A'
        }

        return xor_table[(nucleotide1, nucleotide2)]
       # Assuming expansion_permutation_output and round_keys[0] are sequences of nucleotides
    xor_result = ''.join(dna_xor(n1, n2) for n1, n2 in zip(expansion_permutation_output, round_keys[0]))
    print("XOR result:", xor_result)

# DNA S-Box tables
    s_box_s1= {
        'A': {'AA':'TG', 'AC':'AA', 'AG': 'CA', 'AT': 'TT', 'CA': 'TC', 'CC': 'CT', 'CG': 'AC', 'CT': 'CA',
              'GA': 'AG', 'GC': 'TG', 'GG': 'TT', 'GT': 'AG', 'TA': 'GT', 'TC': 'TC', 'TG': 'GA', 'TT': 'AC'},
        'C': {'AA': 'AT', 'AC': 'GG', 'AG': 'GG', 'AT': 'CG', 'CA': 'CG', 'CC': 'TA', 'CG': 'TA', 'CT': 'GT',
              'GA': 'CC', 'GC': 'GC', 'GG': 'GC', 'GT': 'CC', 'TA': 'AA', 'TC': 'AT', 'TG': 'CT', 'TT': 'GA'},
        'G': {'AA': 'CA', 'AC': 'TT', 'AG': 'AC', 'AT': 'TA', 'CA': 'TG', 'CC': 'GA', 'CG': 'GA', 'CT': 'AG',
              'GA': 'TC', 'GC': 'CA', 'GG': 'CG', 'GT': 'GC', 'TA': 'AG', 'TC': 'AC', 'TG': 'GT', 'TT': 'CT'},
        'T': {'AA': 'TT', 'AC': 'CC', 'AG': 'TA', 'AT': 'GT', 'CA': 'GC', 'CC': 'AT', 'CG': 'CT', 'CT': 'TG',
              'GA': 'AT', 'GC': 'GG', 'GG': 'GG', 'GT': 'AA', 'TA': 'CC', 'TC': 'CG', 'TG': 'AA', 'TT':'TC'}}
    s_box_s2= {
        'A': {'AA': 'TT', 'AC': 'AT', 'AG': 'AC', 'AT': 'TC', 'CA': 'GA', 'CC': 'CA', 'CG': 'TG', 'CT': 'CT',
              'GA': 'CG', 'GC': 'TT', 'GG': 'GT', 'GT': 'AG', 'TA': 'AT', 'TC': 'GA', 'TG': 'CA', 'TT': 'TG'},
            'C': {'AA': 'GC', 'AC': 'TA', 'AG': 'CT', 'AT': 'AA', 'CA': 'AG', 'CC': 'AC', 'CG': 'TC', 'CT': 'GG',
              'GA': 'TA', 'GC': 'CG', 'GG': 'AA', 'GT': 'GC', 'TA': 'CC', 'TC': 'GT','TG': 'GG', 'TT': 'CC'},
        'G': {'AA': 'AA', 'AC': 'TC', 'AG': 'TG', 'AT': 'GA', 'CA': 'CT', 'CC': 'GG', 'CG': 'GT', 'CT': 'AC',
              'GA': 'GG', 'GC': 'AT', 'GG': 'CA', 'GT': 'TT', 'TA': 'TC', 'TC': 'CA', 'TG': 'AC', 'TT': 'AG'},
        'T': {'AA': 'CC', 'AC': 'GT', 'AG': 'GA', 'AT': 'CG', 'CA': 'TA', 'CC': 'CT', 'CG': 'CG', 'CT': 'TA',
              'GA': 'GC', 'GC': 'AA', 'GG': 'AT', 'GT': 'CC', 'TA': 'AG', 'TC': 'TG', 'TG': 'TT', 'TT':'GC'}}

    s_box_s3= {
        'A': {'AA': 'GG', 'AC': 'TC', 'AG': 'AA', 'AT': 'CT', 'CA': 'GC', 'CC': 'AA', 'CG': 'TG', 'CT': 'GC',
              'GA': 'CG', 'GC': 'AT', 'GG': 'AT', 'GT': 'CA', 'TA': 'TT', 'TC': 'CG', 'TG': 'CC', 'TT': 'GG'},
        'C': {'AA': 'AC', 'AC': 'AG', 'AG': 'TC', 'AT': 'GA', 'CA': 'TA', 'CC': 'CC', 'CG': 'CT', 'CT': 'TG',
              'GA': 'GT', 'GC': 'TA', 'GG': 'CA', 'GT': 'GT', 'TA': 'AG', 'TC': 'TT', 'TG': 'GA', 'TT': 'AC'},
        'G': {'AA': 'TC', 'AC': 'AC', 'AG': 'CG', 'AT': 'GG', 'CA': 'CA', 'CC': 'TC', 'CG': 'GC', 'CT': 'AA',
              'GA': 'GA', 'GC': 'CG', 'GG': 'TT', 'GT': 'GC', 'TA': 'AT', 'TC': 'GA', 'TG': 'AA', 'TT': 'CT'},
        'T': {'AA': 'GT', 'AC': 'CA', 'AG': 'AC', 'AT': 'TT', 'CA': 'AG', 'CC': 'TG', 'CG': 'TA', 'CT': 'AT',
              'GA': 'CC', 'GC': 'GT', 'GG': 'GG', 'GT': 'CC', 'TA': 'TG', 'TC': 'AG', 'TG': 'CT', 'TT':'TA'}}
    s_box_s4 = {
        'A': {'AA': 'CT', 'AC': 'TC', 'AG': 'TC', 'AT': 'GA', 'CA': 'TG', 'CC': 'GT', 'CG': 'AT', 'CT': 'CC',
              'GA': 'AA', 'GC': 'CG', 'GG': 'CG', 'GT': 'TT', 'TA': 'GC', 'TC': 'AA', 'TG': 'GG', 'TT': 'AT'},
        'C': {'AA': 'AC', 'AC': 'CA', 'AG': 'AG', 'AT': 'CT', 'CA': 'GA', 'CC': 'AG', 'CG': 'CC', 'CT': 'TA',
              'GA': 'GT', 'GC': 'AC', 'GG': 'TA', 'GT': 'GG', 'TA': 'CA', 'TC': 'TG', 'TG': 'TT', 'TT': 'GC'},
        'G': {'AA': 'GG', 'AC': 'AT', 'AG': 'CG', 'AT': 'TT', 'CA': 'GC', 'CC': 'AA', 'CG': 'AA', 'CT': 'CG',
              'GA': 'TA', 'GC': 'GG', 'GG': 'GT', 'GT': 'AC', 'TA': 'CT', 'TC': 'TC', 'TG': 'TC', 'TT': 'GA'},
        'T': {'AA': 'TT', 'AC': 'GC', 'AG': 'AC', 'AT': 'CA', 'CA': 'AT', 'CC': 'CC', 'CG': 'TG', 'CT': 'GT',
              'GA': 'CC', 'GC': 'TA', 'GG': 'AG', 'GT': 'CT', 'TA': 'GA', 'TC': 'AG', 'TG': 'CA', 'TT':'TG'}}
    s_box_s5= {
        'A': {'AA': 'AG', 'AC': 'TG', 'AG': 'TA', 'AT': 'GT', 'CA': 'CA', 'CC': 'AG', 'CG': 'AC', 'CT': 'TA',
              'GA': 'CT', 'GC': 'CA', 'GG': 'GG', 'GT': 'CT', 'TA': 'GT', 'TC': 'TC', 'TG': 'CG', 'TT': 'AC'},
        'C': {'AA': 'GA', 'AC': 'CC', 'AG': 'CC', 'AT': 'AA', 'CA': 'AT', 'CC': 'TT', 'CG': 'TT', 'CT': 'GG',
              'GA': 'TC', 'GC': 'AT', 'GG': 'AA', 'GT': 'GC', 'TA': 'TG', 'TC': 'GA', 'TG': 'GC', 'TT': 'CG'},
        'G': {'AA': 'CA', 'AC': 'GT', 'AG': 'AG', 'AT': 'GA', 'CA': 'AC', 'CC': 'TA', 'CG': 'GT', 'CT': 'CT',
              'GA': 'GG', 'GC': 'AC', 'GG': 'TC', 'GT': 'TG', 'TA': 'CT', 'TC': 'AG', 'TG': 'GA', 'TT': 'TC'},
        'T': {'AA': 'TT', 'AC': 'CG', 'AG': 'GC', 'AT': 'TT', 'CA': 'TA', 'CC': 'AA', 'CG': 'CC', 'CT': 'GC',
              'GA': 'CG', 'GC': 'GG', 'GG': 'AT', 'GT': 'CA', 'TA': 'AA', 'TC': 'CC', 'TG': 'TG', 'TT':'AT'}}
    s_box_s6= {
        'A': {'AA': 'TA', 'AC': 'GG', 'AG': 'AC', 'AT': 'TT', 'CA': 'GG', 'CC': 'CA', 'CG': 'TT', 'CT': 'AG',
              'GA': 'GC', 'GC': 'CT', 'GG': 'AG', 'GT': 'TA', 'TA': 'CG', 'TC': 'GC', 'TG': 'GA', 'TT': 'CC'},
        'C': {'AA': 'AA', 'AC': 'CG', 'AG': 'TC', 'AT': 'AC', 'CA': 'AT', 'CC': 'TC', 'CG': 'CA', 'CT': 'TG',
              'GA': 'TG', 'GC': 'AA', 'GG': 'CT', 'GT': 'GT', 'TA': 'CC', 'TC': 'AT', 'TG': 'GT', 'TT': 'GA'},
        'G': {'AA': 'GC', 'AC': 'CA', 'AG': 'TG', 'AT': 'AT', 'CA': 'TT', 'CC': 'AG', 'CG': 'CC', 'CT': 'TA',
              'GA': 'AG', 'GC': 'GC', 'GG': 'GA', 'GT': 'CC', 'TA': 'TA', 'TC': 'TT', 'TG': 'AT', 'TT': 'GG'},
        'T': {'AA': 'CT', 'AC': 'GT', 'AG': 'AA', 'AT': 'TG', 'CA': 'CA', 'CC': 'AC', 'CG': 'GG', 'CT': 'CT',
              'GA': 'AC', 'GC': 'CG', 'GG': 'TC', 'GT': 'AA', 'TA': 'GT', 'TC': 'GA', 'TG': 'CG', 'TT':'TC'}}
    s_box_s7 = {
        'A': {'AA': 'CA', 'AC': 'TC', 'AG': 'GT', 'AT': 'AA', 'CA': 'AG', 'CC': 'GT', 'CG': 'TG', 'CT': 'CT',
              'GA': 'TT', 'GC': 'CA', 'GG': 'AA', 'GT': 'GC', 'TA': 'GA', 'TC': 'AC', 'TG': 'TC', 'TT': 'GG'},
        'C': {'AA': 'AT', 'AC': 'TG', 'AG': 'TA', 'AT': 'AT', 'CA': 'GC', 'CC': 'CC', 'CG': 'CT', 'CT': 'TA',
              'GA': 'CC', 'GC': 'AG', 'GG': 'GG', 'GT': 'TT', 'TA': 'CG', 'TC': 'GA', 'TG': 'AC', 'TT': 'CG'},
        'G': {'AA': 'AC', 'AC': 'CG', 'AG': 'CA', 'AT': 'GT', 'CA': 'GT', 'CC': 'TC', 'CG': 'TC', 'CT': 'GA',
              'GA': 'TA', 'GC': 'AC', 'GG': 'AT', 'GT': 'CA', 'TA': 'CT', 'TC': 'GG', 'TG': 'TG', 'TT': 'CT'},
        'T': {'AA': 'GG', 'AC': 'GC', 'AG': 'TT', 'AT': 'CC', 'CA': 'CG', 'CC': 'AA', 'CG': 'GA', 'CT': 'TT',
              'GA': 'AA', 'GC': 'TG', 'GG': 'CC', 'GT': 'AG', 'TA': 'GC', 'TC': 'AT', 'TG': 'AG', 'TT':'TA'}}

    s_box_s8 = {
        'A': {'AA': 'TC', 'AC': 'AC', 'AG': 'AG', 'AT': 'TT', 'CA': 'GA', 'CC': 'TC', 'CG': 'CA', 'CT': 'GA',
              'GA': 'CG', 'GC': 'GG', 'GG': 'TT', 'GT': 'AT', 'TA': 'GT', 'TC': 'CT', 'TG': 'AC', 'TT': 'CA'},
        'C': {'AA': 'GG', 'AC': 'TA', 'AG': 'GC', 'AT': 'CC', 'CA': 'AT', 'CC': 'CG', 'CG': 'TG', 'CT': 'GT',
              'GA': 'CC', 'GC': 'AA', 'GG': 'AA', 'GT': 'TG', 'TA': 'TA', 'TC': 'GC', 'TG': 'CT', 'TT': 'AG'},
        'G': {'AA': 'CT', 'AC': 'AG', 'AG': 'GT', 'AT': 'AC', 'CA': 'CA', 'CC': 'TG', 'CG': 'AC', 'CT': 'CT',
              'GA': 'GC', 'GC': 'CA', 'GG': 'TA', 'GT': 'GG', 'TA': 'TG', 'TC': 'GA', 'TG': 'AG', 'TT': 'TC'},
        'T': {'AA': 'AA', 'AC': 'TT', 'AG': 'CG', 'AT': 'TA', 'CA': 'GG', 'CC': 'GC', 'CG': 'TC', 'CT': 'AA',
              'GA': 'TT', 'GC': 'AT', 'GG': 'AT', 'GT': 'CC', 'TA': 'CC', 'TC': 'CG', 'TG': 'GA', 'TT':'GT'}}
    def divide_input(input_str):
        nucleotides = [input_str[i:i+3] for i in range(0, len(input_str), 3)]
        return nucleotides
    nucleotides = divide_input(xor_result)
    print("Divided nucleotides:", nucleotides)

    def get_sbox_output(s_box, input_str):
        output = ""
        for i in range(0, len(input_str), 3):
            block = input_str[i:i+3]
            row = block[0]
            col = block[1:]
            output += s_box[row][col]
        return output
    def apply_sbox_to_nucleotides(nucleotides, s_boxes):
        output = ""
        for i, nucleotide in enumerate(nucleotides, start=1):
            s_box_index = (i - 1) % len(s_boxes)  # Calculate the index of the corresponding s-box
            s_box = s_boxes[s_box_index]
            output += get_sbox_output(s_box, nucleotide)
        return output
    s_boxes = [s_box_s1, s_box_s2, s_box_s3, s_box_s4, s_box_s5, s_box_s6, s_box_s7, s_box_s8]  # List of S-boxes
    output = apply_sbox_to_nucleotides(nucleotides, s_boxes)
    print("Result after applying S-boxes:", output)

    def apply_pbox(input_str, pbox_indices):
        output_p = ''
        for index in pbox_indices:
            output_p += input_str[index - 1]  # Subtract 1 to convert from 1-based to 0-based index
        return output_p
    pbox_indices = [
    16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25
    ]
    permutated_output = apply_pbox(output, pbox_indices)

    print("Permutated Output:", permutated_output)
    def xor_with_L0(permutated_output, L0):
        result = ''
        for i in range(len(permutated_output)):
            result += dna_xor(permutated_output[i], L0[i])
        return result
    R1=xor_with_L0(permutated_output,L0)
    L1=R0
    print("R1:",xor_with_L0(permutated_output,L0))
    print("L1:",R0)
    #function for printing key from k2 to k16
    def round_function(L_prev, R_prev, round_key):
        expanded_R = expansion_function(R_prev)
        xor_result = ''.join(dna_xor(n1, n2) for n1, n2 in zip(expanded_R, round_key))
        nucleotides = divide_input(xor_result)
        s_box_output = apply_sbox_to_nucleotides(nucleotides, [s_box_s1,s_box_s2,s_box_s3,s_box_s4,
                                                               s_box_s5, s_box_s6, s_box_s7, s_box_s8])
        permuted_output = apply_pbox(s_box_output, pbox_indices)
        R_new = xor_with_L0(permuted_output, L_prev)
        L_new = R_prev

        return L_new, R_new


# Start from round 2 and go up to round 16
    for i in range(2, 17):
        round_key = round_keys[i-1]  # Round keys are zero-indexed in the list
        L1, R1 = round_function(L1, R1, round_key)
        print(f"Round {i}:")
        print("L{} =".format(i), L1)
        print("R{} =".format(i), R1)

    #function for final permutation
    final_output = R1 + L1
    print("Final Output:", final_output)
    def final_permutation(final_output):
        final_perm = [40, 8, 48, 16, 56, 24, 64, 32,
                  39, 7, 47, 15, 55, 23, 63, 31,
                  38, 6, 46, 14, 54, 22, 62, 30,
                  37, 5, 45, 13, 53, 21, 61, 29,
                  36, 4, 44, 12, 52, 20, 60, 28,
                  35, 3, 43, 11, 51, 19, 59, 27,
                  34, 2, 42, 10, 50, 18, 58, 26,
                  33, 1, 41, 9, 49, 17, 57, 25]
        final_permutation_messages=[];
        final_permutation_message = permute(final_output,final_perm)
        final_permutation_messages.append(final_permutation_message)
        return(final_permutation_message)
    final_permutation_output=final_permutation(final_output)
    print("After final_permutation_output:");

    #final permutation output
    print(final_permutation_output)
    def dna_to_bin(final_permutation_output):

        dna_binary_mapping= {
            'A': '00',
            'C': '01',
            'G': '10',
            'T': '11'
        }
        bin_seq = ''
        for i in range(0, len(final_permutation_output), 1):
            bin_seq += dna_binary_mapping[final_permutation_output[i:i+1]]
        return bin_seq
    message=dna_to_bin(final_permutation_output)
    def bin_to_hex(bin_seq):

        bin_to_hex_mapping = {
             '0000':'0',
             '0001':'1',
             '0010':'2',
             '0011':'3',
             '0100':'4',
             '0101':'5',
             '0110':'6',
             '0111':'7',
             '1000':'8',
             '1001':'9',
             '1010':'A',
             '1011':'B',
             '1100':'C',
             '1101':'D',
             '1110':'E',
             '1111':'F'
        }
        hex_seq = ''
        for i in range(0, len(bin_seq), 4):
            hex_seq += bin_to_hex_mapping[bin_seq[i:i+4]]
        return hex_seq
    main_message=bin_to_hex(message)
    return main_message
#final output message
final_output_1=Encryption(hex_input_message,hex_input_key_1)
i_result=Decryption(final_output_1,hex_input_key_2)

final_output=Encryption(i_result,hex_input_key_3)
print(final_output)
#final output verification
final_output_verification=Decryption(final_output,hex_input_key_3)
i_result_verification=Encryption(final_output_verification,hex_input_key_2)
original_message=Decryption(i_result_verification,hex_input_key_1)
print(original_message)
def convert_to_string(ascii_values):
    input_string = ""
    i = 0
    while i < len(ascii_values):
        ascii_val = int(ascii_values[i:i+2])
        if ascii_val == 0:
            break
        input_string += chr(ascii_val)
        i += 2
    return input_string

input_string = convert_to_string(original_message)
print("**************")
print("Original string:", input_string)
print("****************")

"""# New Section"""